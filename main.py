import telebot
import sys
from telebot import types

bot = telebot.TeleBot('')

midterm = 0
endterm = 0

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn2 = types.KeyboardButton('üè´ Final Exam Score')
    btn3 = types.KeyboardButton('Start')
    markup.add(btn2, btn3)

    bot.clear_step_handler(message)
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, —è Final Exam Score Bot!', reply_markup=markup)

@bot.message_handler()
def buttons(message):
        if message.text == 'üè´ Final Exam Score':
            bot.send_message(message.chat.id, '1Ô∏è‚É£ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –æ—Ü–µ–Ω–∫—É –∑–∞ Register Midterm:')
            bot.register_next_step_handler(message, get_midterm)

        elif message.text == 'Start':
            start(message)

@bot.message_handler()
def start_2(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn2 = types.KeyboardButton('üè´ Final Exam Score')
    btn3 = types.KeyboardButton('Start')
    markup.add(btn2, btn3)

    bot.clear_step_handler(message)
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, —è Final Exam Score Bot!', reply_markup=markup)
    bot.send_message(message.chat.id, '1Ô∏è‚É£ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –æ—Ü–µ–Ω–∫—É –∑–∞ Register Midterm:')
    bot.register_next_step_handler(message, get_midterm)

@bot.message_handler()
def get_midterm(message):
        global midterm
        try:
            midterm = float(message.text)

            if midterm < 25 and midterm > 0:
                bot.send_message(message.chat.id, "‚ùå–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –Ω–∏–∂–µ 25% –Ω–∞ Register Mid-Term. –ü–æ –ø—Ä–∞–≤–∏–ª–∞–º –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è —ç—Ç–æ Retake!")
                stick = open('sticker.webp', 'rb')
                bot.send_sticker(message.chat.id, stick)
                kb = types.InlineKeyboardMarkup()
                btn = types.InlineKeyboardButton(text='–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑‚úÖ', callback_data='btn1')
                kb.add(btn)
                bot.send_message(message.chat.id, '–ù–∞–∂–º–∏—Ç–µ —Å—é–¥–∞ –¥–ª—è –µ—â–µ –æ–¥–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞', reply_markup=kb)

            if midterm < 0 or midterm > 100:
                bot.send_message(message.chat.id, "‚ùå–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –æ—Ü–µ–Ω–∫—É, –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 100")

                kb = types.InlineKeyboardMarkup()
                btn = types.InlineKeyboardButton(text='–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑‚úÖ', callback_data='btn1')
                kb.add(btn)
                bot.send_message(message.chat.id, '–ù–∞–∂–º–∏—Ç–µ —Å—é–¥–∞, –¥–ª—è –µ—â–µ –æ–¥–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞', reply_markup=kb)

            if midterm >= 25 and midterm <= 100:
                bot.send_message(message.chat.id, '‚úÖ –û—Ü–µ–Ω–∫–∞ –∑–∞ Register Mid-Term –ø—Ä–∏–Ω—è—Ç–∞.')
                bot.send_message(message.chat.id, '2Ô∏è‚É£ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –æ—Ü–µ–Ω–∫—É –∑–∞ Register End-Term:')
                bot.register_next_step_handler(message, get_endterm)

            with open("bd.txt", "a") as f:
                print(f'User:{message.from_user.first_name} {message.from_user.last_name}, Username:{message.from_user.username}, Midterm grade:{midterm}', file=f)

            if not message.text.isdigit() and not message.text(type) == float:
                    raise ValueError()
        except ValueError:
            bot.send_message(message.chat.id, "–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –æ—Ü–µ–Ω–∫—É!")
            bot.register_next_step_handler(message, get_midterm)

@bot.message_handler()
def get_endterm(message):
        global endterm, midterm
        try:
            endterm = float(message.text)
            term = ((midterm + endterm) / 2)

            if endterm < 25 and endterm > 0:
                bot.send_message(message.chat.id, "–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –Ω–∏–∂–µ 25% –Ω–∞ Register Endterm. –ü–æ –ø—Ä–∞–≤–∏–ª–∞–º –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è —ç—Ç–æ Retake!")
                stick = open('sticker.webp', 'rb')
                bot.send_sticker(message.chat.id, stick)
                kb = types.InlineKeyboardMarkup()
                btn = types.InlineKeyboardButton(text='–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑‚úÖ', callback_data='btn1')
                kb.add(btn)
                bot.send_message(message.chat.id, '–ù–∞–∂–º–∏—Ç–µ —Å—é–¥–∞ –¥–ª—è –µ—â–µ –æ–¥–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞', reply_markup=kb)

            if endterm < 0 or endterm > 100:
                bot.send_message(message.chat.id, "‚ùå–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –æ—Ü–µ–Ω–∫—É, –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 100")
                kb = types.InlineKeyboardMarkup()
                btn = types.InlineKeyboardButton(text='–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑‚úÖ', callback_data='btn1')
                kb.add(btn)
                bot.send_message(message.chat.id, '–ù–∞–∂–º–∏—Ç–µ —Å—é–¥–∞, –¥–ª—è –µ—â–µ –æ–¥–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞', reply_markup=kb)

            if endterm >= 25 and endterm <= 100 and term >= 50:
                get_total(message)

            if term < 50 and midterm >= 25 and endterm >= 25:
                bot.send_message(message.chat.id, "‚ùå–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –∑–∞ Register Term –Ω–∏–∂–µ 50%. –ü–æ –ø—Ä–∞–≤–∏–ª–∞–º –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è —ç—Ç–æ Retake!")
                stick = open('sticker.webp', 'rb')
                bot.send_sticker(message.chat.id, stick)
                kb = types.InlineKeyboardMarkup()
                btn = types.InlineKeyboardButton(text='–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑‚úÖ', callback_data='btn1')
                kb.add(btn)
                bot.send_message(message.chat.id, '–ù–∞–∂–º–∏—Ç–µ —Å—é–¥–∞ –¥–ª—è –µ—â–µ –æ–¥–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞', reply_markup=kb)

            with open("bd.txt", "a") as f:
                print(f'User:{message.from_user.first_name} {message.from_user.last_name}, Username:{message.from_user.username}, Endterm grade:{endterm}', file=f)

            if not message.text.isdigit() and not message.text(type) == float:
                raise ValueError()
        except ValueError:
            bot.send_message(message.chat.id, "‚ùå–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –æ—Ü–µ–Ω–∫—É, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ!")
            bot.register_next_step_handler(message, get_endterm)

@bot.message_handler()
def get_total(message):
    if midterm * 0.3 + endterm * 0.3 >= 50:
        vishka_grade = round((90 - (midterm * 0.3 + endterm * 0.3))/0.4, 2)
        vishka = f'üîµ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π —Å—Ç–∏–ø–µ–Ω–¥–∏–∏ (>90) {vishka_grade} % –Ω–∞ —Ñ–∞–π–Ω–∞–ª–µ!'
    elif midterm * 0.3 + endterm * 0.3 < 50:
        vishka = 'üîµ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π —Å—Ç–∏–ø–µ–Ω–¥–∏–∏ (>90) He–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å!'

    if midterm * 0.3 + endterm * 0.3 >= 30 and midterm * 0.3 + endterm * 0.3 <= 50:
        stepuha_grade = round((70 - (midterm * 0.3 + endterm * 0.3))/0.4, 2)
        stepuha = f'üî¥ –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∏–ø–µ–Ω–¥–∏–∏ (>70) {stepuha_grade}% –Ω–∞ —Ñ–∞–π–Ω–∞–ª–µ!'
    elif midterm * 0.3 + endterm * 0.3 >= 50:
        stepuha = 'üî¥ –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∏–ø–µ–Ω–¥–∏–∏ (>70) 50% –Ω–∞ —Ñ–∞–π–Ω–∞–ª–µ!'
    elif midterm * 0.3 + endterm * 0.3 < 30:
        stepuha = 'üî¥ –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∏–ø–µ–Ω–¥–∏–∏ (>70) He–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å!'

    if midterm * 0.3 + endterm * 0.3 >= 15 and midterm * 0.3 + endterm * 0.3 <= 30:
        letnik_grade = round((50 - (midterm * 0.3 + endterm * 0.3)) / 0.4, 2)
        letnik = f'‚ö´ –ß—Ç–æ–±—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ç–µ–π–∫ –∏–ª–∏ –ø–µ—Ä–µ—Å–¥–∞—á—É (>50) {letnik_grade}% –Ω–∞ —Ñ–∞–π–Ω–∞–ª–µ!'
    elif midterm * 0.3 + endterm * 0.3 >= 30:
        letnik = '‚ö´ –ß—Ç–æ–±—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ç–µ–π–∫ –∏–ª–∏ –ø–µ—Ä–µ—Å–¥–∞—á—É (>50) 50% –Ω–∞ —Ñ–∞–π–Ω–∞–ª–µ!'
    elif midterm * 0.3 + endterm * 0.3 < 15:
        letnik = '‚ö´ –ß—Ç–æ–±—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ç–µ–π–∫ –∏–ª–∏ –ø–µ—Ä–µ—Å–¥–∞—á—É (>50) –û–π, —É –≤–∞—Å –ª–µ—Ç–Ω–∏–∫!'

    totalscore_grade = round((midterm * 0.3 + endterm * 0.3 + 40), 2)
    totalscore = f'‚ö™ –ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 100% –Ω–∞ —Ñ–∞–π–Ω–∞–ª–µ, –≤–∞—à —Ç–æ—Ç–∞–ª –±—É–¥–µ—Ç {totalscore_grade}%!'

    bot.send_message(message.chat.id, letnik)
    bot.send_message(message.chat.id, stepuha)
    bot.send_message(message.chat.id, vishka)
    bot.send_message(message.chat.id, totalscore)

    kb = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton(text='–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑‚úÖ', callback_data='btn1')
    kb.add(btn)
    bot.send_message(message.chat.id, '            üëá            ', reply_markup=kb)

@bot.callback_query_handler(func=lambda call: True)
def inline_handler(call):
    if call.data == 'btn1':
        bot.delete_message(call.message.chat.id, call.message.message_id)
        start_2(call.message)

while True:
    try:
        bot.polling()
    except:
        continue

